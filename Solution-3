import java.util.*;

class subData{
    
    public int score;
    public boolean[] pastWin;
        public subData(int score,boolean[] pastWin) {
           this.score = score;
           this.pastWin = pastWin;
        }
}

public class MyClass {
    public static void main(String args[]) {
        HashMap<String,subData> data = new HashMap();
        
        data.put("GT",new subData(20,new boolean[]{true,true,false,false,true}));
        
        data.put("LSG",new subData(18,new boolean[]{true,false,false,true,true}));
        
        data.put("RR",new subData(16,new boolean[]{true,false,true,false,false}));
        
        data.put("DC",new subData(14,new boolean[]{true,true,false,true,false}));
        
        data.put("RCB",new subData(14,new boolean[]{false,true,true,false,false}));
        
        data.put("KKR",new subData(12,new boolean[]{false,true,true,false,true}));
        
        data.put("PBKS",new subData(12,new boolean[]{false,true,false,true,false}));
        
        data.put("SRH",new subData(12,new boolean[]{true,false,false,false,false}));
        
        data.put("CSK",new subData(8,new boolean[]{false,false,true,false,true}));
        
        data.put("MI",new subData(6,new boolean[]{false,true,false,true,true}));
       
    
    // Task -3
    // Programmatically retrieve the teams that have n consecutive win/losses
     Stack<String> q
            = new Stack<>();
            q.push("None");
            Scanner sc = new Scanner(System.in);
            int n = sc.nextInt();
            boolean isWin = sc.nextBoolean();
            if(n>5){
                     System.out.println("Key = Input Error");
            }
            for (Map.Entry<String,subData> entry : data.entrySet()) {
            for(int i = 4;i >0; i--)
            {
                 if(n==1 && entry.getValue().pastWin[i] == isWin){
                  if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
             else if(n==2 &&  entry.getValue().pastWin[i] == isWin && entry.getValue().pastWin[i-1] == isWin){
                 
                  if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
             else if(n==3 &&i>3 && entry.getValue().pastWin[i] == isWin && entry.getValue().pastWin[i-1] == isWin && entry.getValue().pastWin[i-2] == isWin){
                  if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
             else if(n==4 &&i>4 && entry.getValue().pastWin[i] == isWin && entry.getValue().pastWin[i-1] == isWin && entry.getValue().pastWin[i-2] == isWin&& entry.getValue().pastWin[i-3] == isWin){
                 if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
             else if(n==5 &&i>5 && entry.getValue().pastWin[i] == isWin && entry.getValue().pastWin[i-1] == isWin && entry.getValue().pastWin[i-2] == isWin&& entry.getValue().pastWin[i-3] == isWin&& entry.getValue().pastWin[i-4] == isWin){
                 if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
             else if (n==0){
                 if( q.peek() != entry.getKey()){
                     System.out.println("Key = " + entry.getKey());
                     q.push(entry.getKey());
                     }
             }
                
            }
         
        }
        
    }
    
}
